
uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002fc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080004c0  080004c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004d0  080004d0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004d0  080004d0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d0  080004d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004d8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004dc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004dc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001638  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005be  00000000  00000000  0002166c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00021c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00021e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f835  00000000  00000000  00021fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025a1  00000000  00000000  0004180d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2d61  00000000  00000000  00043dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106b0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f4  00000000  00000000  00106b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004a8 	.word	0x080004a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004a8 	.word	0x080004a8

08000204 <main>:
#include "stm32f4xx.h"
#include <stdint.h>
#include "uart.h"

int main()
{
 8000204:	b590      	push	{r4, r7, lr}
 8000206:	b087      	sub	sp, #28
 8000208:	af00      	add	r7, sp, #0
    uart2_init();
 800020a:	f000 f879 	bl	8000300 <uart2_init>
    while(1)
    {
        char name[] = "Transmited\n\r";
 800020e:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <main+0x44>)
 8000210:	1d3c      	adds	r4, r7, #4
 8000212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000214:	c407      	stmia	r4!, {r0, r1, r2}
 8000216:	7023      	strb	r3, [r4, #0]
        for(int i = 0; name[i] != '\0'; i++)
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]
 800021c:	e009      	b.n	8000232 <main+0x2e>
            uart2_write(name[i]);
 800021e:	1d3a      	adds	r2, r7, #4
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	4413      	add	r3, r2
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	4618      	mov	r0, r3
 8000228:	f000 f8c4 	bl	80003b4 <uart2_write>
        for(int i = 0; name[i] != '\0'; i++)
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	3301      	adds	r3, #1
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	1d3a      	adds	r2, r7, #4
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	4413      	add	r3, r2
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1ef      	bne.n	800021e <main+0x1a>
        delayMs(50);
 800023e:	2032      	movs	r0, #50	; 0x32
 8000240:	f000 f840 	bl	80002c4 <delayMs>
    {
 8000244:	e7e3      	b.n	800020e <main+0xa>
 8000246:	bf00      	nop
 8000248:	080004c0 	.word	0x080004c0

0800024c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000250:	e7fe      	b.n	8000250 <NMI_Handler+0x4>

08000252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000252:	b480      	push	{r7}
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000256:	e7fe      	b.n	8000256 <HardFault_Handler+0x4>

08000258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800025c:	e7fe      	b.n	800025c <MemManage_Handler+0x4>

0800025e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800025e:	b480      	push	{r7}
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000262:	e7fe      	b.n	8000262 <BusFault_Handler+0x4>

08000264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000268:	e7fe      	b.n	8000268 <UsageFault_Handler+0x4>

0800026a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800026a:	b480      	push	{r7}
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr

08000286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000286:	b480      	push	{r7}
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000298:	f000 f8ce 	bl	8000438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <SystemInit+0x20>)
 80002a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002aa:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <SystemInit+0x20>)
 80002ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <delayMs>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);



void delayMs(int n)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
    for (; n > 0; n--)
 80002cc:	e00d      	b.n	80002ea <delayMs+0x26>
        for (int i = 0; i < 5000; i++);
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	e002      	b.n	80002da <delayMs+0x16>
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	3301      	adds	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	f241 3287 	movw	r2, #4999	; 0x1387
 80002e0:	4293      	cmp	r3, r2
 80002e2:	ddf7      	ble.n	80002d4 <delayMs+0x10>
    for (; n > 0; n--)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	3b01      	subs	r3, #1
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	dcee      	bgt.n	80002ce <delayMs+0xa>

}
 80002f0:	bf00      	nop
 80002f2:	bf00      	nop
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
	...

08000300 <uart2_init>:

void uart2_init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
    // Enable clock access to GPIOA
    RCC->AHB1ENR |= GPIOAEN;
 8000304:	4b14      	ldr	r3, [pc, #80]	; (8000358 <uart2_init+0x58>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a13      	ldr	r2, [pc, #76]	; (8000358 <uart2_init+0x58>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6313      	str	r3, [r2, #48]	; 0x30

    // Set PA2 mode to alternate function mode
    GPIOA->MODER |= PA2MOD;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <uart2_init+0x5c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <uart2_init+0x5c>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6013      	str	r3, [r2, #0]
    // Set PA2 alternate function type to UART_TX (AF07)
    GPIOA->AFR[0] |= PA2AF;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <uart2_init+0x5c>)
 800031e:	6a1b      	ldr	r3, [r3, #32]
 8000320:	4a0e      	ldr	r2, [pc, #56]	; (800035c <uart2_init+0x5c>)
 8000322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000326:	6213      	str	r3, [r2, #32]

    // Enable clock access to USART2
    RCC->APB1ENR |= APB1EN;
 8000328:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <uart2_init+0x58>)
 800032a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <uart2_init+0x58>)
 800032e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000332:	6413      	str	r3, [r2, #64]	; 0x40

    // Configure baudrate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000338:	4909      	ldr	r1, [pc, #36]	; (8000360 <uart2_init+0x60>)
 800033a:	480a      	ldr	r0, [pc, #40]	; (8000364 <uart2_init+0x64>)
 800033c:	f000 f814 	bl	8000368 <uart_set_baudrate>

    // Configure the transfer direction
    USART2->CR1 = USART2_TX;
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <uart2_init+0x64>)
 8000342:	2208      	movs	r2, #8
 8000344:	60da      	str	r2, [r3, #12]

    // Enable USART2 module
    USART2->CR1 |= USART2EN;
 8000346:	4b07      	ldr	r3, [pc, #28]	; (8000364 <uart2_init+0x64>)
 8000348:	68db      	ldr	r3, [r3, #12]
 800034a:	4a06      	ldr	r2, [pc, #24]	; (8000364 <uart2_init+0x64>)
 800034c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000350:	60d3      	str	r3, [r2, #12]
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40020000 	.word	0x40020000
 8000360:	00f42400 	.word	0x00f42400
 8000364:	40004400 	.word	0x40004400

08000368 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
    USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000374:	6879      	ldr	r1, [r7, #4]
 8000376:	68b8      	ldr	r0, [r7, #8]
 8000378:	f000 f808 	bl	800038c <compute_uart_bd>
 800037c:	4603      	mov	r3, r0
 800037e:	461a      	mov	r2, r3
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
    return ((PeriphClk + (BaudRate / 2U)) / BaudRate);
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	085a      	lsrs	r2, r3, #1
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	441a      	add	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a4:	b29b      	uxth	r3, r3
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <uart2_write>:

void uart2_write(int ch)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
    // Make sure the transmit data register is empty
    while(!(USART2->SR & SR_TXE));
 80003bc:	bf00      	nop
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <uart2_write+0x2c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <uart2_write+0xa>

    // Write to transmit data register
    USART2->DR = (ch & 0xFF);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <uart2_write+0x2c>)
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	6053      	str	r3, [r2, #4]
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40004400 	.word	0x40004400

080003e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800041c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003ea:	490e      	ldr	r1, [pc, #56]	; (8000424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003ec:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a0b      	ldr	r2, [pc, #44]	; (800042c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000400:	4c0b      	ldr	r4, [pc, #44]	; (8000430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800040e:	f7ff ff47 	bl	80002a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000412:	f000 f825 	bl	8000460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000416:	f7ff fef5 	bl	8000204 <main>
  bx  lr    
 800041a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800041c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000424:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000428:	080004d8 	.word	0x080004d8
  ldr r2, =_sbss
 800042c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000430:	20000024 	.word	0x20000024

08000434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000434:	e7fe      	b.n	8000434 <ADC_IRQHandler>
	...

08000438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <HAL_IncTick+0x20>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	461a      	mov	r2, r3
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <HAL_IncTick+0x24>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4413      	add	r3, r2
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_IncTick+0x24>)
 800044a:	6013      	str	r3, [r2, #0]
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000000 	.word	0x20000000
 800045c:	20000020 	.word	0x20000020

08000460 <__libc_init_array>:
 8000460:	b570      	push	{r4, r5, r6, lr}
 8000462:	4d0d      	ldr	r5, [pc, #52]	; (8000498 <__libc_init_array+0x38>)
 8000464:	4c0d      	ldr	r4, [pc, #52]	; (800049c <__libc_init_array+0x3c>)
 8000466:	1b64      	subs	r4, r4, r5
 8000468:	10a4      	asrs	r4, r4, #2
 800046a:	2600      	movs	r6, #0
 800046c:	42a6      	cmp	r6, r4
 800046e:	d109      	bne.n	8000484 <__libc_init_array+0x24>
 8000470:	4d0b      	ldr	r5, [pc, #44]	; (80004a0 <__libc_init_array+0x40>)
 8000472:	4c0c      	ldr	r4, [pc, #48]	; (80004a4 <__libc_init_array+0x44>)
 8000474:	f000 f818 	bl	80004a8 <_init>
 8000478:	1b64      	subs	r4, r4, r5
 800047a:	10a4      	asrs	r4, r4, #2
 800047c:	2600      	movs	r6, #0
 800047e:	42a6      	cmp	r6, r4
 8000480:	d105      	bne.n	800048e <__libc_init_array+0x2e>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	f855 3b04 	ldr.w	r3, [r5], #4
 8000488:	4798      	blx	r3
 800048a:	3601      	adds	r6, #1
 800048c:	e7ee      	b.n	800046c <__libc_init_array+0xc>
 800048e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000492:	4798      	blx	r3
 8000494:	3601      	adds	r6, #1
 8000496:	e7f2      	b.n	800047e <__libc_init_array+0x1e>
 8000498:	080004d0 	.word	0x080004d0
 800049c:	080004d0 	.word	0x080004d0
 80004a0:	080004d0 	.word	0x080004d0
 80004a4:	080004d4 	.word	0x080004d4

080004a8 <_init>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr

080004b4 <_fini>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr
